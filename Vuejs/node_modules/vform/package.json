{
  "_from": "vform",
  "_id": "vform@1.0.0",
  "_inBundle": false,
  "_integrity": "sha512-9X17bCzeWW6quND76TxouUgV221gFXqBllLTQjvj8MZgqAmi3bsY578f7EeYI9nvuv2LdyLTW4YcuPlIqqLdDw==",
  "_location": "/vform",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "vform",
    "fetchSpec": "latest",
    "name": "vform",
    "raw": "vform",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/vform/-/vform-1.0.0.tgz",
  "_shasum": "8bca811f6380d64089972f3f4a1d9adb35bc0273",
  "_shrinkwrap": null,
  "_spec": "vform",
  "_where": "/opt/lampp/htdocs/Project/Test/Vuejs",
  "author": {
    "name": "Cretu Eusebiu"
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not ie <= 8"
  ],
  "bugs": {
    "url": "https://github.com/cretueusebiu/vform/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "A simple way to handle Laravel back-end validation in Vue.",
  "devDependencies": {
    "@vue/cli-plugin-babel": "^3.0.0-beta.1",
    "@vue/cli-plugin-eslint": "^3.0.0-beta.1",
    "@vue/cli-plugin-unit-jest": "^3.0.0-beta.1",
    "@vue/cli-service": "^3.0.0-beta.1",
    "@vue/eslint-config-standard": "^3.0.0-beta.1",
    "@vue/test-utils": "^1.0.0-beta.11",
    "axios": "^0.17.1",
    "axios-mock-adapter": "^1.13.1",
    "babel-core": "^7.0.0-0",
    "babel-jest": "^22.0.4",
    "object-to-formdata": "^1.2.2",
    "vue": "^2.5.13",
    "vue-template-compiler": "^2.5.13"
  },
  "files": [
    "dist/*.js",
    "src"
  ],
  "homepage": "https://github.com/cretueusebiu/vform#readme",
  "keywords": [
    "form",
    "laravel",
    "vue"
  ],
  "license": "MIT",
  "main": "dist/vform.common.js",
  "name": "vform",
  "optionalDependencies": {},
  "peerDependencies": {
    "axios": "*"
  },
  "readme": "# vform\n\n<p>\n  <a href=\"https://npmjs.com/package/vform\"><img src=\"https://img.shields.io/npm/v/vform.svg?style=flat-square\" alt=\"Latest Version on NPM\"></a>\n  <a href=\"https://travis-ci.org/cretueusebiu/vform\"><img src=\"https://travis-ci.org/cretueusebiu/vform.svg?branch=master\" alt=\"Build Status\"></a>\n  <a href=\"https://npmjs.com/package/vform\"><img src=\"https://img.shields.io/npm/dt/vform.svg?style=flat-square\" alt=\"Total Downloads\"></a>\n</p>\n\n>A simple way to handle Laravel back-end validation in Vue. Inspired from <a href=\"https://spark.laravel.com\">Laravel Spark</a>.\n\n<p align=\"center\">\n  <img src=\"http://i.imgur.com/AcBAPll.gif\" width=\"700\" alt=\"vform\">\n</p>\n\n## Installation\n\n```bash\nnpm i axios vform\n```\n\n## Usage\n\nSee the included [examples](example).\n\n__Bootstrap 4 Markup:__\n\n```vue\n<template>\n<div id=\"app\">\n  <form @submit.prevent=\"login\" @keydown=\"form.onKeydown($event)\">\n    <div class=\"form-group\">\n      <label>Username</label>\n      <input v-model=\"form.username\" type=\"text\" name=\"username\"\n        class=\"form-control\" :class=\"{ 'is-invalid': form.errors.has('username') }\">\n      <has-error :form=\"form\" field=\"username\"></has-error>\n    </div>\n\n    <div class=\"form-group\">\n      <label>Password</label>\n      <input v-model=\"form.password\" type=\"password\" name=\"password\"\n        class=\"form-control\" :class=\"{ 'is-invalid': form.errors.has('password') }\">\n      <has-error :form=\"form\" field=\"password\"></has-error>\n    </div>\n\n    <button :disabled=\"form.busy\" type=\"submit\" class=\"btn btn-primary\">Log In</button>\n  </form>\n</div>  \n</template>\n\n<script>\nimport Vue from 'vue'\nimport { Form, HasError, AlertError } from 'vform'\n\nVue.component(HasError.name, HasError)\nVue.component(AlertError.name, AlertError)\n\nnew Vue({\n  el: '#app',\n  \n  data () {\n    return {\n      // Create a new form instance\n      form: new Form({\n        username: '',\n        password: '',\n        remember: false\n      })\n    }\n  },\n\n  methods: {\n    login () {\n      // Submit the form via a POST request\n      this.form.post('/login')\n        .then(({ data }) => { console.log(data) })\n    }\n  }\n})\n</script>\n```\n\n__Laravel Controller:__\n\n```php\nclass LoginController extends Controller\n{\n    public function login(Request $request)\n    {\n        $this->validate($request, [\n            'username' => 'required',\n            'password' => 'required',\n        ]);\n\n        // ...\n    }\n}\n```\n\n## Api \n\n### Form\n\n```javascript\n/**\n * Indicates if the form is sent to the server.\n *\n * @var {Boolean}\n */\nbusy\n\n/**\n * Indicates if the response form the server was successful.\n *\n * @var {Boolean}\n */\nsuccessful\n\n/**\n * Contains the validation errors from the server.\n * \n * @var {Errors}\n */\nerrors\n\n/**\n * Create a new form instance.\n *\n * @param {Object} data\n */\nconstructor (data = {})\n\n/**\n * Submit the from via a POST|PATCH|PUT|DELETE|GET request.\n *\n * @param  {String} url\n * @return {Promise}\n */\npost|patch|put|delete|get (url)\n\n/**\n * Clear the form errors.\n */\nclear ()\n\n/**\n * Reset the form fields.\n */\nreset ()\n\n/**\n * Fill form data.\n *\n * @param {Object} data\n */\nfill (data)\n```\n\n### Errors\n\n```javascript\n/**\n * Get all the errors.\n *\n * @return {Object}\n */\nall ()\n\n/**\n * Determine if there is an error for the given field.\n *\n * @param  {String} field\n * @return {Boolean}\n */\nhas (field)\n\n/**\n * Determine if there are any errors for the given fields.\n *\n * @param  {...String} fields\n * @return {Boolean}\n */\nhasAny (...fields)\n\n/**\n * Determine if there are any errors.\n *\n * @return {Boolean}\n */\nany ()\n\n/**\n * Get the first error message for the given field.\n *\n * @param  String} field\n * @return {String|undefined}\n */\nget (field)\n\n/**\n * Get all the error messages for the given field.\n *\n * @param  {String} field\n * @return {Array}\n */\ngetAll (field)\n\n/**\n * Get the error message for the given fields.\n *\n * @param  {...String} fields\n * @return {Array}\n */\nonly (...fields)\n\n/**\n * Get all the errors in a flat array.\n *\n * @return {Array}\n */\nflatten ()\n\n/**\n * Clear one or all error fields.\n *\n * @param {String|undefined} field\n */\nclear (field)\n\n/**\n * Set the errors object.\n *\n * @param {Object}\n */\nset (errors)\n\n/**\n * Set a specified error message.\n *\n * @param {String}\n * @param {String}\n */\nset (field, message)\n```\n\n## Bootstrap Components\n\nComponents for Bootstrap 3 and 4.\n\n```javascript\nimport { \n  HasError,\n  AlertError,\n  AlertErrors, \n  AlertSuccess\n} from 'vform'\n\nVue.component(HasError.name, HasError)\nVue.component(AlertError.name, AlertError)\nVue.component(AlertErrors.name, AlertErrors)\nVue.component(AlertSuccess.name, AlertSuccess)\n```\n\n### has-error\n\nDisplay the validation error for a field.\n\n```html\n<!-- Bootstrap 4 -->\n<div class=\"form-group\">\n  <label>Username</label>\n  <input v-model=\"form.username\" type=\"text\" name=\"username\"\n    class=\"form-control\" :class=\"{ 'is-invalid': form.errors.has('username') }\">\n  <has-error :form=\"form\" field=\"username\"></has-error>\n</div>\n\n<!-- Bootstrap 3 -->\n<div class=\"form-group\" :class=\"{ 'has-error': form.errors.has('username') }\">\n  <label>Username</label>\n  <input v-model=\"form.username\" type=\"text\" name=\"username\" class=\"form-control\">\n  <has-error :form=\"form\" field=\"username\"></has-error>\n</div>\n```\n\n### alert-error\n\nShow a danger alert if there are any errors.\n\n```html\n<alert-error :form=\"form\" message=\"There were some problems with your input.\"></alert-error>\n```\n\n### alert-errors\n\nShow a danger alert with the list of errors for each field.\n\n```html\n<alert-errors :form=\"form\" message=\"There were some problems with your input.\"></alert-errors>\n<!-- Or -->\n<alert-errors :form=\"form\">There were some problems with your input.</alert-errors>\n```\n\n### alert-success\n\nShow a success alert on a successful request.\n\n```html\n<alert-success :form=\"form\" message=\"Your changes have been saved!\"></alert-success>\n<!-- Or -->\n<alert-success :form=\"form\">Your changes have been saved!</alert-success>\n```\n\n## Changelog\n\nPlease see [CHANGELOG](CHANGELOG.md) for more information what has changed recently.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cretueusebiu/vform.git"
  },
  "scripts": {
    "build": "vue-cli-service build src/index.js --target lib",
    "lint": "vue-cli-service lint",
    "prepublishOnly": "npm run test && npm run build",
    "test": "vue-cli-service test test/"
  },
  "unpkg": "dist/vform.umd.js",
  "version": "1.0.0"
}
