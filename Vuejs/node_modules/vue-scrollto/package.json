{
  "_from": "vue-scrollto",
  "_id": "vue-scrollto@2.13.0",
  "_inBundle": false,
  "_integrity": "sha512-ZjvWhY2LbEGqbtvDrBBm04AvgNfYGySJnakyHXxgv4UNlM0hRpkN1UKjKqB8J8U96YOEra+WjxmhujrBGeshbA==",
  "_location": "/vue-scrollto",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "vue-scrollto",
    "fetchSpec": "latest",
    "name": "vue-scrollto",
    "raw": "vue-scrollto",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/vue-scrollto/-/vue-scrollto-2.13.0.tgz",
  "_shasum": "fe23c9e5d684271c48154e8d504370cd40a8d6fd",
  "_shrinkwrap": null,
  "_spec": "vue-scrollto",
  "_where": "/opt/lampp/htdocs/Graduation/Vuejs",
  "author": {
    "email": "shout@igor-randjelovic.com",
    "name": "Igor Randjelovic",
    "url": "http://igor-randjelovic.com"
  },
  "bugs": {
    "url": "https://github.com/rigor789/vue-scrollto/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "bezier-easing": "^2.0.3"
  },
  "deprecated": false,
  "description": "Adds a directive that listens for click events and scrolls to elements.",
  "devDependencies": {
    "babel-plugin-transform-object-assign": "^6.22.0",
    "babel-preset-es2015-rollup": "^3.0.0",
    "lint-staged": "^3.3.1",
    "pre-commit": "^1.2.2",
    "prettier": "^0.19.0",
    "rollup": "^0.41.6",
    "rollup-plugin-babel": "^2.7.1",
    "rollup-plugin-commonjs": "^8.0.2",
    "rollup-plugin-node-resolve": "^2.0.0"
  },
  "homepage": "https://github.com/rigor789/vue-scrollto#readme",
  "keywords": [
    "directive",
    "scroll",
    "scroll to",
    "scrollto",
    "vue",
    "vuejs"
  ],
  "license": "MIT",
  "lint-staged": {
    "src/**.js": [
      "git add",
      "prettier --write --tab-width=4"
    ]
  },
  "main": "vue-scrollto.js",
  "name": "vue-scrollto",
  "optionalDependencies": {},
  "pre-commit": "lint-staged",
  "readme": "# vue-scrollto\n\n[![Vue 2.x](https://img.shields.io/badge/Vue-2.x-brightgreen.svg)](https://vuejs.org/v2/guide/)\n[![npm](https://img.shields.io/npm/v/vue-scrollto.svg)](https://www.npmjs.com/package/vue-scrollto)\n[![npm-downloads](https://img.shields.io/npm/dm/vue-scrollto.svg)](https://www.npmjs.com/package/vue-scrollto)\n[![license](https://img.shields.io/github/license/mashape/apistatus.svg)](https://github.com/rigor789/vue-scrollto/blob/master/LICENSE)\n\n[DEMO](https://rigor789.github.io/vue-scrollto/#/examples)\n\nScrolling to elements was never this easy!\n\nThis is for `vue 2.x`\n\nFor `vue 1.x` use `vue-scrollTo@1.0.1` (note the capital T) but keep in mind that the old version depends on `jquery`.\n\n## Under the hood\n\n`vue-scrollto` uses `window.requestAnimationFrame` to perform the animations, thus giving the best performance.\n\nEasing is done using [bezier-easing](https://github.com/gre/bezier-easing) - A well tested easing micro-library.\n\n<p class=\"tip\">\nIt even knows when the user interrupts, and doesn't force scrolling that would result in bad UX.\n</p>\n\n## Installing\n\nThis package is available on npm.\n\n<p class=\"warning\">\n    If you used this package before, please ensure you are using the right one, since it has been renamed from `vue-scrollTo` to `vue-scrollto`\n</p>\n\nUsing npm:\n```bash\nnpm install --save vue-scrollto\n```\n\nUsing yarn:\n```bash\nyarn add vue-scrollto\n```\n\nDirectly include it in html:\n```html\n<script src=\"https://cdn.jsdelivr.net/npm/vue\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/vue-scrollto\"></script>\n```\n<p class=\"tip\">\n    When including it in html, it will automatically call `Vue.use` and also set a `VueScrollTo` variable that you can use!\n</p>\n\n\n## Usage\n\nvue-scrollto can be used either as a vue directive, or programatically from your javascript.\n\n### As a vue directive\n```js\nvar Vue = require('vue');\nvar VueScrollTo = require('vue-scrollto');\n\nVue.use(VueScrollTo)\n\n// You can also pass in the default options\nVue.use(VueScrollTo, {\n     container: \"body\",\n     duration: 500,\n     easing: \"ease\",\n     offset: 0,\n     force: true,\n     cancelable: true,\n     onStart: false,\n     onDone: false,\n     onCancel: false,\n     x: false,\n     y: true\n })\n```\n\nIn case you are using the browser version (directly including the script on your page), you can set the defaults with\n \n```js\nVueScrollTo.setDefaults({\n    container: \"body\",\n    duration: 500,\n    easing: \"ease\",\n    offset: 0,\n    force: true,\n    cancelable: true,\n    onStart: false,\n    onDone: false,\n    onCancel: false,\n    x: false,\n    y: true\n})\n```\n\n```html\n<a href=\"#\" v-scroll-to=\"'#element'\">Scroll to #element</a>\n\n<div id=\"element\">\n    Hi. I'm #element.\n</div>\n```\n\nIf you need to customize the scrolling options, you can pass in an object literal to the directive:\n\n```html\n<a href=\"#\" v-scroll-to=\"{\n     el: '#element',\n     container: '#container',\n     duration: 500,\n     easing: 'linear',\n     offset: -200,\n     force: true,\n     cancelable: true,\n     onStart: onStart,\n     onDone: onDone,\n     onCancel: onCancel,\n     x: false,\n     y: true\n }\">\n    Scroll to #element\n</a>\n```\n\n<p class=\"tip\">\n    Check out the Options section for more details about the available options.\n</p>\n\n### Programatically\n\n```js\nvar VueScrollTo = require('vue-scrollto');\n\nvar options = {\n    container: '#container',\n    easing: 'ease-in',\n    offset: -60,\n    force: true,\n    cancelable: true,\n    onStart: function(element) {\n      // scrolling started\n    },\n    onDone: function(element) {\n      // scrolling is done\n    },\n    onCancel: function() {\n      // scrolling has been interrupted\n    },\n    x: false,\n    y: true\n}\n\nvar cancelScroll = VueScrollTo.scrollTo(element, duration, options)\n\n// or alternatively inside your components you can use\ncancelScroll = this.$scrollTo(element, duration, options)\n\n// to cancel scrolling you can call the returned function\ncancelScroll()\n```\n\n## Options\n\n#### el / element \nThe element you want to scroll to.\n\n#### container\nThe container that has to be scrolled. \n\n*Default:* `body`\n\n#### duration\nThe duration (in milliseconds) of the scrolling animation. \n\n*Default:* `500` \n\n#### easing \nThe easing to be used when animating. Read more in the [Easing section](#easing-detailed). \n\n*Default:* `ease`\n\n#### offset \nThe offset that should be applied when scrolling. This option accepts a callback function since `v2.8.0`. \n\n*Default:* `0`\n\n#### force\nIndicates if scrolling should be performed, even if the scroll target is already in view.\n\n*Default:* `true`\n\n#### cancelable\nIndicates if user can cancel the scroll or not.\n\n*Default:* `true`\n\n#### onStart\nA callback function that should be called when scrolling has started. Receives the target element as a parameter.\n\n*Default:* `noop`\n\n#### onDone \nA callback function that should be called when scrolling has ended. Receives the target element as a parameter.\n\n*Default:* `noop`\n\n#### onCancel \nA callback function that should be called when scrolling has been aborted by the user (user scrolled, clicked etc.). Receives the abort event and the target element as parameters.\n \n*Default:* `noop`\n\n#### x \nWhether or not we want scrolling on the `x` axis\n \n*Default:* `false`\n\n#### y \nWhether or not we want scrolling on the `y` axis\n \n*Default:* `true`\n\n\n<h2 id=\"easing-detailed\">Easing</h2>\n\nEasing is calculated using [bezier-easing](https://github.com/gre/bezier-easing) so you can pass your own values into `options.easing` in the form of an array with 4 values, or you can use any of the default easings by referencing their names as strings (`ease`, `linear`, `ease-in`, `ease-out`, `ease-in-out`).\n\nvue-scrollto uses the following values for the default easings:\n```js\nlet easings = {\n    'ease': [0.25, 0.1, 0.25, 1.0],\n    'linear': [0.00, 0.0, 1.00, 1.0],\n    'ease-in': [0.42, 0.0, 1.00, 1.0],\n    'ease-out': [0.00, 0.0, 0.58, 1.0],\n    'ease-in-out': [0.42, 0.0, 0.58, 1.0]\n}\n```\n\n## Simultaneous Scrolling\n\nIf you need to scroll multiple containers simultaneously, you can import the scroller factory directly and create multiple instances. (Using the default `scrollTo` methods allows for only one scroll action at a time for performance reasons.)\n\n```js\nimport {scroller} from 'vue-scrollto/src/scrollTo'\nconst firstScrollTo = scroller()\nconst secondScrollTo = scroller()\nfirstScrollTo('#el1')\nsecondScrollTo('#el2')\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rigor789/vue-scrollto.git"
  },
  "scripts": {
    "build": "rollup -c",
    "lint-staged": "lint-staged",
    "prepublishOnly": "npm run build"
  },
  "version": "2.13.0"
}
