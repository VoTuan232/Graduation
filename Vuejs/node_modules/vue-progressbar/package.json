{
  "_from": "vue-progressbar",
  "_id": "vue-progressbar@0.7.5",
  "_inBundle": false,
  "_integrity": "sha512-VeNG/inMsFbvdCTS7lJ1gjDAKSUZdqkhW9gS1tb0we1rqFKxR+BCEiVUgw5C84vODKb14M2GWHTw0WVdpoVg6g==",
  "_location": "/vue-progressbar",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "vue-progressbar",
    "fetchSpec": "latest",
    "name": "vue-progressbar",
    "raw": "vue-progressbar",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/vue-progressbar/-/vue-progressbar-0.7.5.tgz",
  "_shasum": "414730892252b1e45582d4979dec93038e007f79",
  "_shrinkwrap": null,
  "_spec": "vue-progressbar",
  "_where": "/opt/lampp/htdocs/Project/Test/Vuejs",
  "author": "",
  "bugs": {
    "url": "https://github.com/hilongjw/vue-progressbar/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "A lightweight progress bar for vue",
  "devDependencies": {
    "babel-core": "^6.25.0",
    "babel-plugin-external-helpers": "^6.22.0",
    "babel-preset-es2015": "^6.24.1",
    "rollup": "^0.47.4",
    "rollup-plugin-babel": "^3.0.1",
    "rollup-plugin-commonjs": "^8.1.0",
    "rollup-plugin-json": "^2.3.0",
    "rollup-plugin-node-resolve": "^3.0.0",
    "rollup-plugin-replace": "^1.1.1",
    "rollup-plugin-uglify": "^2.0.1",
    "rollup-plugin-vue": "^2.4.1",
    "vue": "^2.4.2"
  },
  "homepage": "https://github.com/hilongjw/vue-progressbar#readme",
  "keywords": [
    "progressbar",
    "vue",
    "vue loading progress",
    "vue progressbar",
    "vue-progressbar"
  ],
  "license": "MIT",
  "main": "dist/vue-progressbar.js",
  "name": "vue-progressbar",
  "optionalDependencies": {},
  "readme": "# vue-progressbar\n\n# Table of Contents\n* [___Demo___](#demo)\n* [___Requirements___](#requirements)\n* [___Installation___](#installation)\n* [___Usage___](#usage)  \n * [___Constructor Options___](#constructor-options)\n * [___Implementation___](#implementation)\n * [___vue-router___](#vue-router)  \n   * [___meta options___](#vue--router-meta-options)  \n* [___Methods___](#methods)\n* [___Examples___](#examples)\n* [___License___](#license)\n\n# Demo\n[___Demo___](http://hilongjw.github.io/vue-progressbar/index.html)\n# Requirements\n- [Vue.js](https://github.com/vuejs/vue) `1.x` or `2.x`  \n\n# Installation\n```bash\n# npm\n$ npm install vue-progressbar\n\n#yarn\n$ yarn add vue-progressbar\n```\n# Usage\n\nmain.js\n\n```javascript\nimport Vue from 'vue'\nimport VueProgressBar from 'vue-progressbar'\nimport App from './App'\n\nconst options = {\n  color: '#bffaf3',\n  failedColor: '#874b4b',\n  thickness: '5px',\n  transition: {\n    speed: '0.2s',\n    opacity: '0.6s',\n    termination: 300\n  },\n  autoRevert: true,\n  location: 'left',\n  inverse: false\n}\n\nVue.use(VueProgressBar, options)\n\nnew Vue({\n  ...App\n}).$mount('#app')\n\n\n```\n## Constructor Options\n|key|description|default|options|\n|:---|---|---|---|\n| `color`|color of the progress bar|`'rgb(143, 255, 199)'`|`RGB` `HEX` `HSL` `HSV` `VEC`|\n|`failedColor`|color of the progress bar upon load fail|`'red'`|`RGB`, `HEX`, `HSL`, `HSV`, `VEC`\n|`thickness`|thickness of the progress bar|`'2px'`|`px`, `em`, `pt`, `%`, `vh`, `vw`|\n|`transition`|transition speed/opacity/termination of the progress bar|`{speed: '0.2s', opacity: '0.6s', termination: 300}`|`speed`, `opacity`, `termination`|\n|`autoRevert`|will temporary color changes automatically revert upon completion or fail|`true`|`true`, `false`|\n|`location`|change the location of the progress bar|`top`|`left`, `right`, `top`, `bottom`|\n|`position`|change the position of the progress bar|`fixed`|`relative`, `absolute`, `fixed`|\n|`inverse`|inverse the direction of the progress bar|`false`|`true`, `false`|\n|`autoFinish`|allow the progress bar to finish automatically when it is close to 100%|`false`|`true`, `true`|\n\n## Implementation\n\nApp.vue\n```html\n<template>\n    <div id=\"app\">\n        <!-- for example router view -->\n        <router-view></router-view>\n        <!-- set progressbar -->\n        <vue-progress-bar></vue-progress-bar>\n    </div>\n</template>\n\n<script>\nexport default {\n  mounted () {\n    //  [App.vue specific] When App.vue is finish loading finish the progress bar\n    this.$Progress.finish()\n  },\n  created () {\n    //  [App.vue specific] When App.vue is first loaded start the progress bar\n    this.$Progress.start()\n    //  hook the progress bar to start before we move router-view\n    this.$router.beforeEach((to, from, next) => {\n      //  does the page we want to go to have a meta.progress object\n      if (to.meta.progress !== undefined) {\n        let meta = to.meta.progress\n        // parse meta tags\n        this.$Progress.parseMeta(meta)\n      }\n      //  start the progress bar\n      this.$Progress.start()\n      //  continue to next page\n      next()\n    })\n    //  hook the progress bar to finish after we've finished moving router-view\n    this.$router.afterEach((to, from) => {\n      //  finish the progress bar\n      this.$Progress.finish()\n    })\n  }\n}\n</script>\n```\n## vue-router\n```js\nexport default [\n  {\n    path: '/achievement',\n    name: 'achievement',\n    component: './components/Achievement.vue'\n    meta: {\n      progress: {\n        func: [\n          {call: 'color', modifier: 'temp', argument: '#ffb000'},\n          {call: 'fail', modifier: 'temp', argument: '#6e0000'},\n          {call: 'location', modifier: 'temp', argument: 'top'},\n          {call: 'transition', modifier: 'temp', argument: {speed: '1.5s', opacity: '0.6s', termination: 400}}\n        ]\n      }\n    }\n  }\n]\n```\n### vue-router meta options\n\n|call|modifier|argument|example|\n|:---|---|---|---|\n|color|`set`, `temp`|`string`|`{call: 'color', modifier: 'temp', argument: '#ffb000'}`|\n|fail|`set`, `temp`|`string`|`{call: 'fail', modifier: 'temp', argument: '#ffb000'}`|\n|location|`set`, `temp`|`string`|`{call: 'location', modifier: 'temp', argument: 'top'}`|\n|transition|`set`, `temp`|` object`|`{call: 'transition', modifier: 'temp', argument: {speed: '0.6s', opacity: '0.6s', termination: 400}}`|\n\n# Methods\n|function|description|parameters|example|\n|:---|---|---|---|\n|start|start the progress bar loading|`N/A`|`this.$Progress.start()`|\n|finish|finish the progress bar loading|`N/A`|`this.$Progress.finish()`|\n|fail|cause the progress bar to end and fail|`N/A`|`this.$Progress.fail()`|\n|increase|increase the progress bar by a certain %|`number: integer`|`this.$Progress.increase(number)`|\n|decrease|decrease the progress bar by a certain %|`number: integer`|`this.$Progress.decrease(number)`|\n|set|set the progress bar %|`number: integer`|`this.$Progress.set(number)`|\n|setFailColor|cause the fail color to permanently change|`color: string`|`this.$Progress.setFailColor(color)`|\n|setColor|cause the progress color to permanently change|`color: string`|`this.$Progress.setColor(color)`|\n|setLocation|cause the progress bar location to permanently change|`location: string`|`this.$Progress.setLocation(location)`|\n|setTransition|cause the progress bar transition speed/opacity/termination to permanently change|`transition: object`|`this.$Progress.setTransition(transition)`|\n|tempFailColor|cause the fail color to change (temporarily)|`color: string`|`this.$Progress.tempFailColor(color)`|\n|tempColor|cause the progress color to change (temporarily)|`color: string`|`this.$Progress.tempColor(color)`|\n|tempLocation|cause the progress bar location to change (temporarily)|`location: string`|`this.$Progress.tempLocation(location)`|\n|tempTransition|cause the progress bar location to change (temporarily)|`transition: object`|`this.$Progress.tempTransition(transition)`|\n|revertColor|cause the temporarily set progress color to revert back to it's previous color|`N/A`|`this.$Progress.revertColor()`|\n|revertFailColor|cause the temporarily set fail color to revert back to it's previous color|`N/A`|`this.$Progress.revertFailColor()`|\n|revertTransition|cause the temporarily set transition to revert back to it's previous state|`N/A`|`this.$Progress.revertTransition()`|\n|revert|cause the temporarily set progress and/or fail color to their previous colors|`N/A`|`this.$Progress.revert()`|\n|parseMeta|parses progress meta data|`meta: object`|`this.$Progress.parseMeta(meta)`|\n\n# Examples\nLoading Data (vue-resource)\n```html\n\n<script>\nexport default {\n  methods: {\n    test () {\n      this.$Progress.start()\n      this.$http.jsonp('http://api.rottentomatoes.com/api/public/v1.0/lists/movies/in_theaters.json?apikey=7waqfqbprs7pajbz28mqf6vz')\n      .then((response) => {\n          this.$Progress.finish()\n      }, (response) => {\n          this.$Progress.fail()\n      })\n    }\n  }\n}\n</script>\n\n```\n---\nAccessing the progress bar externally through the vue instance (e.g. axios interceptors)\n\n**main.js**\n```js\n// main.js from Usage section\n\nVue.use(VueProgressBar, options)\n\nexport default new Vue({ // export the Vue instance\n  ...App\n}).$mount('#app')\n```\n**api-axios.js**\n```js\nimport axios from 'axios';\nimport app from '../main'; // import the instance\n\nconst instance = axios.create({\n    baseURL: '/api'\n});\n\ninstance.interceptors.request.use(config => {\n    app.$Progress.start(); // for every request start the progress\n    return config;\n});\n\ninstance.interceptors.response.use(response => {\n    app.$Progress.finish(); // finish when a response is received\n    return response;\n});\n\nexport default instance; // export axios instace to be imported in your app\n```\n\n\n# License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/hilongjw/vue-progressbar.git"
  },
  "scripts": {
    "build": "rollup -c"
  },
  "version": "0.7.5"
}
